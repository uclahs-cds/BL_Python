"""
This type stub file was generated by pyright.
"""

from saml2 import extension_elements_to_elements
from saml2.authn_context import ippword, mobiletwofactor, ppt, pword, sslcert
from saml2.saml import AuthnContext, AuthnContextClassRef
from saml2.samlp import RequestedAuthnContext

UNSPECIFIED = ...
INTERNETPROTOCOLPASSWORD = ...
MOBILETWOFACTORCONTRACT = ...
PASSWORDPROTECTEDTRANSPORT = ...
PASSWORD = ...
TLSCLIENT = ...
TIMESYNCTOKEN = ...
AL1 = ...
AL2 = ...
AL3 = ...
AL4 = ...
CMP_TYPE = ...
class AuthnBroker:
    def __init__(self) -> None:
        ...
    
    @staticmethod
    def exact(a, b):
        ...
    
    @staticmethod
    def minimum(a, b):
        ...
    
    @staticmethod
    def maximum(a, b):
        ...
    
    @staticmethod
    def better(a, b):
        ...
    
    def add(self, spec, method, level=..., authn_authority=..., reference=...): # -> None:
        """
        Adds a new authentication method.
        Assumes not more than one authentication method per AuthnContext
        specification.

        :param spec: What the authentication endpoint offers in the form
            of an AuthnContext
        :param method: A identifier of the authentication method.
        :param level: security level, positive integers, 0 is lowest
        :param reference: Desired unique reference to this `spec'
        :return:
        """
        ...
    
    def remove(self, spec, method=..., level=..., authn_authority=...): # -> None:
        ...
    
    def pick(self, req_authn_context=...): # -> list[tuple[Any, Any]] | list[Any] | None:
        """
        Given the authentication context find zero or more places where
        the user could be sent next. Ordered according to security level.

        :param req_authn_context: The requested context as an
            RequestedAuthnContext instance
        :return: An URL
        """
        ...
    
    def match(self, requested, provided): # -> bool:
        ...
    
    def __getitem__(self, ref):
        ...
    
    def get_authn_by_accr(self, accr):
        ...
    


def authn_context_factory(text): # -> None:
    ...

def authn_context_decl_from_extension_elements(extelems): # -> None:
    ...

def authn_context_class_ref(ref): # -> AuthnContext:
    ...

def requested_authn_context(class_ref, comparison=...): # -> RequestedAuthnContext:
    ...

