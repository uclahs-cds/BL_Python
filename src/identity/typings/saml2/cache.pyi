"""
This type stub file was generated by pyright.
"""

from saml2 import SAMLError

logger = ...
class ToOld(SAMLError):
    ...


class TooOld(ToOld):
    ...


class CacheError(SAMLError):
    ...


class Cache:
    def __init__(self, filename=...) -> None:
        ...
    
    def delete(self, name_id): # -> None:
        """

        :param name_id: The subject identifier, a NameID instance
        """
        ...
    
    def get_identity(self, name_id, entities=..., check_not_on_or_after=...): # -> tuple[dict[Any, Any], list[Any]]:
        """Get all the identity information that has been received and
        are still valid about the subject.

        :param name_id: The subject identifier, a NameID instance
        :param entities: The identifiers of the entities whoes assertions are
            interesting. If the list is empty all entities are interesting.
        :return: A 2-tuple consisting of the identity information (a
            dictionary of attributes and values) and the list of entities
            whoes information has timed out.
        """
        ...
    
    def get(self, name_id, entity_id, check_not_on_or_after=...): # -> Any | None:
        """Get session information about a subject gotten from a
        specified IdP/AA.

        :param name_id: The subject identifier, a NameID instance
        :param entity_id: The identifier of the entity_id
        :param check_not_on_or_after: if True it will check if this
             subject is still valid or if it is too old. Otherwise it
             will not check this. True by default.
        :return: The session information
        """
        ...
    
    def set(self, name_id, entity_id, info, not_on_or_after=...): # -> None:
        """Stores session information in the cache. Assumes that the name_id
        is unique within the context of the Service Provider.

        :param name_id: The subject identifier, a NameID instance
        :param entity_id: The identifier of the entity_id/receiver of an
            assertion
        :param info: The session info, the assertion is part of this
        :param not_on_or_after: A time after which the assertion is not valid.
        """
        ...
    
    def reset(self, name_id, entity_id): # -> None:
        """Scrap the assertions received from a IdP or an AA about a special
        subject.

        :param name_id: The subject identifier, a NameID instance
        :param entity_id: The identifier of the entity_id of the assertion
        :return:
        """
        ...
    
    def entities(self, name_id): # -> list[Any]:
        """Returns all the entities of assertions for a subject, disregarding
        whether the assertion still is valid or not.

        :param name_id: The subject identifier, a NameID instance
        :return: A possibly empty list of entity identifiers
        """
        ...
    
    def receivers(self, name_id): # -> list[Any]:
        """Another name for entities() just to make it more logic in the IdP
        scenario"""
        ...
    
    def active(self, name_id, entity_id): # -> bool:
        """Returns the status of assertions from a specific entity_id.

        :param name_id: The ID of the subject
        :param entity_id: The entity ID of the entity_id of the assertion
        :return: True or False depending on if the assertion is still
            valid or not.
        """
        ...
    
    def subjects(self): # -> list[NameID]:
        """Return identifiers for all the subjects that are in the cache.

        :return: list of subject identifiers
        """
        ...
    


