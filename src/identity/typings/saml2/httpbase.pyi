"""
This type stub file was generated by pyright.
"""

import requests
from saml2 import SAMLError

logger = ...
if requests.__version__ < "2.0.0":
    DICT_HEADERS = ...
else:
    DICT_HEADERS = ...
__author__ = ...
ATTRS = ...
PAIRS = ...
class ConnectionError(SAMLError):
    ...


class HTTPError(SAMLError):
    ...


TIME_FORMAT = ...
def set_list2dict(sl): # -> dict[Any, Any]:
    ...

def dict2set_list(dic): # -> list[tuple[Any, Any]]:
    ...

class HTTPBase:
    def __init__(self, verify=..., ca_bundle=..., key_file=..., cert_file=..., http_client_timeout=...) -> None:
        ...
    
    def cookies(self, url): # -> dict[Any, Any]:
        """
        Return cookies that are matching the path and are still valid

        :param url:
        :return:
        """
        ...
    
    def set_cookie(self, kaka, request): # -> None:
        """Returns a http_cookiejar.Cookie based on a set-cookie header line"""
        ...
    
    def send(self, url, method=..., **kwargs): # -> Response:
        ...
    
    @staticmethod
    def use_http_artifact(message, destination=..., relay_state=...): # -> dict[str, str]:
        ...
    
    @staticmethod
    def use_http_uri(message, typ, destination=..., relay_state=...): # -> dict[str, Any] | dict[str, str]:
        ...
    
    def use_soap(self, request, destination=..., soap_headers=..., sign=..., **kwargs): # -> dict[str, Any]:
        """
        Construct the necessary information for using SOAP+POST

        :param request:
        :param destination:
        :param soap_headers:
        :param sign:
        :return: dictionary
        """
        ...
    
    def send_using_soap(self, request, destination, headers=..., sign=...): # -> Response:
        """
        Send a message using SOAP+POST

        :param request:
        :param destination:
        :param headers:
        :param sign:
        :return:
        """
        ...
    
    def add_credentials(self, user, passwd): # -> None:
        ...
    


