"""
This type stub file was generated by pyright.
"""

__author__ = ...
NSPAIR = ...
DEFAULTS = ...
ORG_ATTR_TRANSL = ...
MDNS = ...
bMDNS = ...
XMLNSXS = ...
bXMLNSXS = ...
def metadata_tostring_fix(desc, nspair, xmlstring=...): # -> str:
    ...

def create_metadata_string(configfile, config=..., valid=..., cert=..., keyfile=..., mid=..., name=..., sign=..., sign_alg=..., digest_alg=...): # -> str:
    ...

def do_organization_info(ava): # -> Organization | None:
    """
    Description of an organization in the configuration is
    a dictionary of keys and values, where the values might be tuples::

        "organization": {
            "name": ("AB Exempel", "se"),
            "display_name": ("AB Exempel", "se"),
            "url": "http://www.example.org"
        }

    """
    ...

def do_contact_person_info(ava): # -> ContactPerson:
    """Create a ContactPerson instance from configuration information."""
    ...

def do_contact_persons_info(lava): # -> list[ContactPerson]:
    ...

def do_key_descriptor(cert=..., enc_cert=..., use=...): # -> KeyDescriptor | list[Any]:
    ...

def do_requested_attribute(attributes, acs, is_required=..., name_format=...): # -> list[Any]:
    ...

def do_uiinfo(_uiinfo): # -> UIInfo:
    ...

def do_idpdisc(discovery_response): # -> DiscoveryResponse:
    ...

ENDPOINTS = ...
ENDPOINT_EXT = ...
DEFAULT_BINDING = ...
def do_extensions(mname, item): # -> list[Any] | None:
    ...

def do_endpoints(conf, endpoints):
    ...

DEFAULT = ...
def do_attribute_consuming_service(conf, spsso): # -> None:
    ...

def do_spsso_descriptor(conf, cert=..., enc_cert=...): # -> SPSSODescriptor:
    ...

def do_idpsso_descriptor(conf, cert=..., enc_cert=...): # -> IDPSSODescriptor:
    ...

def do_aa_descriptor(conf, cert=..., enc_cert=...): # -> AttributeAuthorityDescriptor:
    ...

def do_aq_descriptor(conf, cert=..., enc_cert=...): # -> AuthnAuthorityDescriptor:
    ...

def do_pdp_descriptor(conf, cert=..., enc_cert=...): # -> PDPDescriptor:
    """Create a Policy Decision Point descriptor"""
    ...

def entity_descriptor(confd): # -> EntityDescriptor:
    ...

def entities_descriptor(eds, valid_for, name, ident, sign, secc, sign_alg=..., digest_alg=...): # -> tuple[Any | EntitiesDescriptor | None, Any | None]:
    ...

def sign_entity_descriptor(edesc, ident, secc, sign_alg=..., digest_alg=...): # -> tuple[Any | None, Any]:
    """

    :param edesc: EntityDescriptor instance
    :param ident: EntityDescriptor identifier
    :param secc: Security context
    :return: Tuple with EntityDescriptor instance and Signed XML document
    """
    ...

