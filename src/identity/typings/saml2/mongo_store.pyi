"""
This type stub file was generated by pyright.
"""

from saml2.eptid import Eptid
from saml2.ident import IdentDB
from saml2.mdstore import InMemoryMetaData

__author__ = ...
logger = ...
ONTS = ...
MMODS = ...
class CorruptDatabase(Exception):
    ...


def context_match(cfilter, cntx): # -> Literal[True]:
    ...

class SessionStorageMDB:
    """Session information is stored in a MongoDB database"""
    def __init__(self, database=..., collection=..., **kwargs) -> None:
        ...
    
    def store_assertion(self, assertion, to_sign): # -> None:
        ...
    
    def get_assertion(self, cid): # -> None:
        ...
    
    def get_assertions_by_subject(self, name_id=..., session_index=..., requested_context=...): # -> list[Any]:
        """

        :param name_id: One of name_id or key can be used to get the authn
            statement
        :param session_index: If match against a session index should be done
        :param requested_context: Authn statements should match a specific
            authn context
        :return:
        """
        ...
    
    def remove_authn_statements(self, name_id): # -> None:
        ...
    
    def get_authn_statements(self, name_id, session_index=..., requested_context=...): # -> list[Any]:
        """

        :param name_id:
        :param session_index:
        :param requested_context:
        :return:
        """
        ...
    


class IdentMDB(IdentDB):
    def __init__(self, database=..., collection=..., domain=..., name_qualifier=...) -> None:
        ...
    
    def in_store(self, _id): # -> bool:
        ...
    
    def create_id(self, nformat, name_qualifier=..., sp_name_qualifier=...): # -> str:
        ...
    
    def store(self, ident, name_id): # -> None:
        ...
    
    def find_nameid(self, userid, nformat=..., sp_name_qualifier=..., name_qualifier=..., sp_provided_id=..., **kwargs): # -> list[Any]:
        ...
    
    def find_local_id(self, name_id): # -> None:
        ...
    
    def match_local_id(self, userid, sp_name_qualifier, name_qualifier): # -> list[Any] | Any | dict[Any, Any] | str | None:
        """
        Match a local persistent identifier.

        Look for an existing persistent NameID matching userid,
        sp_name_qualifier and name_qualifier.
        """
        ...
    
    def remove_remote(self, name_id): # -> None:
        ...
    
    def handle_name_id_mapping_request(self, name_id, name_id_policy): # -> NameID:
        ...
    


class MDB:
    primary_key = ...
    def __init__(self, database, collection, **kwargs) -> None:
        ...
    
    def store(self, value, **kwargs): # -> None:
        ...
    
    def get(self, value=..., **kwargs): # -> list[Any] | None:
        ...
    
    def remove(self, key=..., **kwargs): # -> None:
        ...
    
    def keys(self): # -> Generator[Any, Any, None]:
        ...
    
    def items(self): # -> Generator[tuple[Any, Any], Any, None]:
        ...
    
    def __contains__(self, key): # -> bool:
        ...
    
    def reset(self): # -> None:
        ...
    


class EptidMDB(Eptid):
    def __init__(self, secret, database=..., collection=...) -> None:
        ...
    
    def __getitem__(self, key):
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    


def protect(dic): # -> dict[Any, Any]:
    ...

def unprotect(dic): # -> dict[Any, Any]:
    ...

def export_mdstore_to_mongo_db(mds, database, collection, sub_collection=...): # -> None:
    ...

class MetadataMDB(InMemoryMetaData):
    def __init__(self, attrc, database=..., collection=...) -> None:
        ...
    
    def load(self): # -> None:
        ...
    
    def items(self): # -> Generator[tuple[Any, dict[Any, Any]], Any, None]:
        ...
    
    def keys(self): # -> Generator[Any, Any, None]:
        ...
    
    def values(self): # -> Generator[dict[Any, Any], Any, None]:
        ...
    
    def __contains__(self, item): # -> bool:
        ...
    
    def __getitem__(self, item): # -> dict[Any, Any]:
        ...
    
    def bindings(self, entity_id, typ, service): # -> None:
        ...
    


