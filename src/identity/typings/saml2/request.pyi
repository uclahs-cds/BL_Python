"""
This type stub file was generated by pyright.
"""

logger = ...
class Request:
    def __init__(self, sec_context, receiver_addrs, attribute_converters=..., timeslack=...) -> None:
        ...
    
    def issue_instant_ok(self):
        """Check that the request was issued at a reasonable time"""
        ...
    
    def loads(self, xmldata, binding, origdoc=..., must=..., only_valid_cert=..., relay_state=..., sigalg=..., signature=...): # -> Self:
        ...
    
    def verify(self): # -> None:
        ...
    
    def subject_id(self): # -> None:
        """The name of the subject can be in either of
        BaseID, NameID or EncryptedID

        :return: The identifier if there is one
        """
        ...
    
    def sender(self):
        ...
    


class LogoutRequest(Request):
    msgtype = ...
    def __init__(self, sec_context, receiver_addrs, attribute_converters=..., timeslack=...) -> None:
        ...
    
    @property
    def issuer(self):
        ...
    


class AttributeQuery(Request):
    msgtype = ...
    def __init__(self, sec_context, receiver_addrs, attribute_converters=..., timeslack=...) -> None:
        ...
    
    def attribute(self): # -> list[Any]:
        """Which attributes that are sought for"""
        ...
    


class AuthnRequest(Request):
    msgtype = ...
    def __init__(self, sec_context, receiver_addrs, attribute_converters, timeslack=...) -> None:
        ...
    
    def attributes(self): # -> dict[Any, Any]:
        ...
    


class AuthnQuery(Request):
    msgtype = ...
    def __init__(self, sec_context, receiver_addrs, attribute_converters, timeslack=...) -> None:
        ...
    
    def attributes(self): # -> dict[Any, Any]:
        ...
    


class AssertionIDRequest(Request):
    msgtype = ...
    def __init__(self, sec_context, receiver_addrs, attribute_converters, timeslack=...) -> None:
        ...
    
    def attributes(self): # -> dict[Any, Any]:
        ...
    


class AuthzDecisionQuery(Request):
    msgtype = ...
    def __init__(self, sec_context, receiver_addrs, attribute_converters=..., timeslack=...) -> None:
        ...
    
    def action(self): # -> None:
        """Which action authorization is requested for"""
        ...
    
    def evidence(self): # -> None:
        """The evidence on which the decision is based"""
        ...
    
    def resource(self): # -> None:
        """On which resource the action is expected to occur"""
        ...
    


class NameIDMappingRequest(Request):
    msgtype = ...
    def __init__(self, sec_context, receiver_addrs, attribute_converters, timeslack=...) -> None:
        ...
    


class ManageNameIDRequest(Request):
    msgtype = ...
    def __init__(self, sec_context, receiver_addrs, attribute_converters, timeslack=...) -> None:
        ...
    


SERVICE2REQUEST = ...
