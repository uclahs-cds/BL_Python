"""
This type stub file was generated by pyright.
"""

logger = ...
class SamlException(Exception):
    ...


class RequestVersionTooLow(SamlException):
    ...


class RequestVersionTooHigh(SamlException):
    ...


class UnknownPrincipal(SamlException):
    ...


class UnknownSystemEntity(SamlException):
    ...


class Unsupported(SamlException):
    ...


class UnsupportedBinding(Unsupported):
    ...


class VersionMismatch(Exception):
    ...


class Unknown(Exception):
    ...


class OtherError(Exception):
    ...


class MissingValue(Exception):
    ...


class PolicyError(Exception):
    ...


class BadRequest(Exception):
    ...


class UnravelError(Exception):
    ...


EXCEPTION2STATUS = ...
GENERIC_DOMAINS = ...
def valid_email(emailaddress, domains=...): # -> bool:
    """Checks for a syntactically valid email address."""
    ...

def decode_base64_and_inflate(string): # -> bytes:
    """base64 decodes and then inflates according to RFC1951

    :param string: a deflated and encoded string
    :return: the string after decoding and inflating
    """
    ...

def deflate_and_base64_encode(string_val): # -> bytes:
    """
    Deflates and the base64 encodes a string

    :param string_val: The string to deflate and encode
    :return: The deflated and encoded string
    """
    ...

def rndstr(size=..., alphabet=...): # -> str:
    """
    Returns a string of random ascii characters or digits

    :param size: The length of the string
    :return: string
    """
    ...

def rndbytes(size=..., alphabet=...): # -> bytes:
    """
    Returns rndstr always as a binary type
    """
    ...

def sid(): # -> str:
    """creates an unique SID for each session.
    160-bits long so it fulfills the SAML2 requirements which states
    128-160 bits

    :return: A random string prefix with 'id-' to make it
        compliant with the NCName specification
    """
    ...

def parse_attribute_map(filenames): # -> tuple[dict[Any, Any], dict[Any, Any]]:
    """
    Expects a file with each line being composed of the oid for the attribute
    exactly one space, a user friendly name of the attribute and then
    the type specification of the name.

    :param filenames: List of filenames on mapfiles.
    :return: A 2-tuple, one dictionary with the oid as keys and the friendly
        names as values, the other one the other way around.
    """
    ...

def identity_attribute(form, attribute, forward_map=...):
    ...

def error_status_factory(info): # -> Status:
    ...

def success_status_factory(): # -> Status:
    ...

def status_message_factory(message, code, fro=...): # -> Status:
    ...

def assertion_factory(**kwargs): # -> Assertion:
    ...

def do_ava(val, typ=...): # -> list[AttributeValue] | list[Any] | None:
    ...

def do_attribute(val, typ, key): # -> Attribute:
    ...

def do_attributes(identity): # -> list[Any]:
    ...

def do_attribute_statement(identity): # -> AttributeStatement:
    """
    :param identity: A dictionary with fiendly names as keys
    :return:
    """
    ...

def factory(klass, **kwargs):
    ...

def signature(secret, parts): # -> str:
    """Generates a signature. All strings are assumed to be utf-8"""
    ...

def verify_signature(secret, parts): # -> bool:
    """Checks that the signature is correct"""
    ...

def exception_trace(exc): # -> dict[str, str]:
    ...

def rec_factory(cls, **kwargs):
    ...

