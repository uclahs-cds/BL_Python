"""
This type stub file was generated by pyright.
"""

from saml2 import SamlBase

NAMESPACE = ...
XSD = ...
XS_NAMESPACE = ...
XSI_NAMESPACE = ...
NS_SOAP_ENC = ...
XSI_TYPE = ...
XSI_NIL = ...
NAMEID_FORMAT_UNSPECIFIED = ...
NAMEID_FORMAT_EMAILADDRESS = ...
NAMEID_FORMAT_X509SUBJECTNAME = ...
NAMEID_FORMAT_WINDOWSDOMAINQUALIFIEDNAME = ...
NAMEID_FORMAT_KERBEROS = ...
NAMEID_FORMAT_ENTITY = ...
NAMEID_FORMAT_PERSISTENT = ...
NAMEID_FORMAT_TRANSIENT = ...
NAMEID_FORMAT_ENCRYPTED = ...
NAMEID_FORMATS_SAML2 = ...
PROFILE_ATTRIBUTE_BASIC = ...
AUTHN_PASSWORD = ...
AUTHN_PASSWORD_PROTECTED = ...
NAME_FORMAT_UNSPECIFIED = ...
NAME_FORMAT_URI = ...
NAME_FORMAT_BASIC = ...
NAME_FORMATS_SAML2 = ...
DECISION_TYPE_PERMIT = ...
DECISION_TYPE_DENY = ...
DECISION_TYPE_INDETERMINATE = ...
CONSENT_UNSPECIFIED = ...
CONSENT_OBTAINED = ...
CONSENT_PRIOR = ...
CONSENT_IMPLICIT = ...
CONSENT_EXPLICIT = ...
CONSENT_UNAVAILABLE = ...
CONSENT_INAPPLICABLE = ...
SCM_HOLDER_OF_KEY = ...
SCM_SENDER_VOUCHES = ...
SCM_BEARER = ...
class AttributeValueBase(SamlBase):
    def __init__(self, text=..., extension_elements=..., extension_attributes=...) -> None:
        ...
    
    def __setattr__(self, key, value): # -> None:
        ...
    
    def verify(self): # -> Literal[True] | None:
        ...
    
    def set_type(self, typ): # -> None:
        ...
    
    def get_type(self): # -> str:
        ...
    
    def clear_type(self): # -> None:
        ...
    
    def set_text(self, value, base64encode=...): # -> Self:
        ...
    
    def harvest_element_tree(self, tree): # -> None:
        ...
    


class BaseIDAbstractType_(SamlBase):
    """The urn:oasis:names:tc:SAML:2.0:assertion:BaseIDAbstractType element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...
    def __init__(self, name_qualifier=..., sp_name_qualifier=..., text=..., extension_elements=..., extension_attributes=...) -> None:
        ...
    


class NameIDType_(SamlBase):
    """The urn:oasis:names:tc:SAML:2.0:assertion:NameIDType element"""
    c_tag = ...
    c_namespace = ...
    c_value_type = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...
    def __init__(self, name_qualifier=..., sp_name_qualifier=..., format=..., sp_provided_id=..., text=..., extension_elements=..., extension_attributes=...) -> None:
        ...
    


def name_id_type__from_string(xml_string): # -> None:
    ...

class EncryptedElementType_(SamlBase):
    """The urn:oasis:names:tc:SAML:2.0:assertion:EncryptedElementType element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...
    def __init__(self, encrypted_data=..., encrypted_key=..., text=..., extension_elements=..., extension_attributes=...) -> None:
        ...
    


def encrypted_element_type__from_string(xml_string): # -> None:
    ...

class EncryptedID(EncryptedElementType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:EncryptedID element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def encrypted_id_from_string(xml_string): # -> None:
    ...

class Issuer(NameIDType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:Issuer element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def issuer_from_string(xml_string): # -> None:
    ...

class AssertionIDRef(SamlBase):
    """The urn:oasis:names:tc:SAML:2.0:assertion:AssertionIDRef element"""
    c_tag = ...
    c_namespace = ...
    c_value_type = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def assertion_id_ref_from_string(xml_string): # -> None:
    ...

class AssertionURIRef(SamlBase):
    """The urn:oasis:names:tc:SAML:2.0:assertion:AssertionURIRef element"""
    c_tag = ...
    c_namespace = ...
    c_value_type = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def assertion_uri_ref_from_string(xml_string): # -> None:
    ...

class SubjectConfirmationDataType_(SamlBase):
    """The urn:oasis:names:tc:SAML:2.0:assertion:SubjectConfirmationDataType
    element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...
    c_any = ...
    c_any_attribute = ...
    def __init__(self, not_before=..., not_on_or_after=..., recipient=..., in_response_to=..., address=..., text=..., extension_elements=..., extension_attributes=...) -> None:
        ...
    


def subject_confirmation_data_type__from_string(xml_string): # -> None:
    ...

class KeyInfoConfirmationDataType_(SamlBase):
    """The urn:oasis:names:tc:SAML:2.0:assertion:KeyInfoConfirmationDataType
    element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...
    def __init__(self, key_info=..., text=..., extension_elements=..., extension_attributes=...) -> None:
        ...
    


def key_info_confirmation_data_type__from_string(xml_string): # -> None:
    ...

class ConditionAbstractType_(SamlBase):
    """The urn:oasis:names:tc:SAML:2.0:assertion:ConditionAbstractType
    element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


class Audience(SamlBase):
    """The urn:oasis:names:tc:SAML:2.0:assertion:Audience element"""
    c_tag = ...
    c_namespace = ...
    c_value_type = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def audience_from_string(xml_string): # -> None:
    ...

class OneTimeUseType_(ConditionAbstractType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:OneTimeUseType element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def one_time_use_type__from_string(xml_string): # -> None:
    ...

class ProxyRestrictionType_(ConditionAbstractType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:ProxyRestrictionType element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...
    def __init__(self, audience=..., count=..., text=..., extension_elements=..., extension_attributes=...) -> None:
        ...
    


def proxy_restriction_type__from_string(xml_string): # -> None:
    ...

class EncryptedAssertion(EncryptedElementType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:EncryptedAssertion element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def encrypted_assertion_from_string(xml_string): # -> None:
    ...

class StatementAbstractType_(SamlBase):
    """The urn:oasis:names:tc:SAML:2.0:assertion:StatementAbstractType element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


class SubjectLocalityType_(SamlBase):
    """The urn:oasis:names:tc:SAML:2.0:assertion:SubjectLocalityType element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...
    def __init__(self, address=..., dns_name=..., text=..., extension_elements=..., extension_attributes=...) -> None:
        ...
    


def subject_locality_type__from_string(xml_string): # -> None:
    ...

class AuthnContextClassRef(SamlBase):
    """The urn:oasis:names:tc:SAML:2.0:assertion:AuthnContextClassRef element"""
    c_tag = ...
    c_namespace = ...
    c_value_type = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def authn_context_class_ref_from_string(xml_string): # -> None:
    ...

class AuthnContextDeclRef(SamlBase):
    """The urn:oasis:names:tc:SAML:2.0:assertion:AuthnContextDeclRef element"""
    c_tag = ...
    c_namespace = ...
    c_value_type = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def authn_context_decl_ref_from_string(xml_string): # -> None:
    ...

class AuthnContextDecl(SamlBase):
    """The urn:oasis:names:tc:SAML:2.0:assertion:AuthnContextDecl element"""
    c_tag = ...
    c_namespace = ...
    c_value_type = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def authn_context_decl_from_string(xml_string): # -> None:
    ...

class AuthenticatingAuthority(SamlBase):
    """The urn:oasis:names:tc:SAML:2.0:assertion:AuthenticatingAuthority
    element"""
    c_tag = ...
    c_namespace = ...
    c_value_type = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def authenticating_authority_from_string(xml_string): # -> None:
    ...

class DecisionType_(SamlBase):
    """The urn:oasis:names:tc:SAML:2.0:assertion:DecisionType element"""
    c_tag = ...
    c_namespace = ...
    c_value_type = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def decision_type__from_string(xml_string): # -> None:
    ...

class ActionType_(SamlBase):
    """The urn:oasis:names:tc:SAML:2.0:assertion:ActionType element"""
    c_tag = ...
    c_namespace = ...
    c_value_type = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...
    def __init__(self, namespace=..., text=..., extension_elements=..., extension_attributes=...) -> None:
        ...
    


def action_type__from_string(xml_string): # -> None:
    ...

class AttributeValue(AttributeValueBase):
    """The urn:oasis:names:tc:SAML:2.0:assertion:AttributeValue element"""
    c_tag = ...
    c_namespace = ...
    c_value_type = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def attribute_value_from_string(xml_string): # -> None:
    ...

class EncryptedAttribute(EncryptedElementType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:EncryptedAttribute element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def encrypted_attribute_from_string(xml_string): # -> None:
    ...

class BaseID(BaseIDAbstractType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:BaseID element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def base_id_from_string(xml_string): # -> None:
    ...

class NameID(NameIDType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:NameID element

    From the Oasis SAML2 Technical Overview:

    "The <NameID> element within a <Subject> offers the ability to provide name
     identifiers in a number of different formats. SAML's predefined formats
     include: Email address, X.509 subject name, Windows domain qualified name,
     Kerberos principal name, Entity identifier, Persistent identifier,
     Transient identifier."
    """
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def name_id_from_string(xml_string): # -> None:
    ...

class SubjectConfirmationData(SubjectConfirmationDataType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:SubjectConfirmationData
    element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def subject_confirmation_data_from_string(xml_string): # -> None:
    ...

class Condition(ConditionAbstractType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:Condition element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def condition_from_string(xml_string): # -> None:
    ...

class AudienceRestrictionType_(ConditionAbstractType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:AudienceRestrictionType
    element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...
    def __init__(self, audience=..., text=..., extension_elements=..., extension_attributes=...) -> None:
        ...
    


def audience_restriction_type__from_string(xml_string): # -> None:
    ...

class OneTimeUse(OneTimeUseType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:OneTimeUse element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def one_time_use_from_string(xml_string): # -> None:
    ...

class ProxyRestriction(ProxyRestrictionType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:ProxyRestriction element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def proxy_restriction_from_string(xml_string): # -> None:
    ...

class Statement(StatementAbstractType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:Statement element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def statement_from_string(xml_string): # -> None:
    ...

class SubjectLocality(SubjectLocalityType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:SubjectLocality element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...
    def verify(self): # -> Literal[True]:
        ...
    


def subject_locality_from_string(xml_string): # -> None:
    ...

class AuthnContextType_(SamlBase):
    """The urn:oasis:names:tc:SAML:2.0:assertion:AuthnContextType element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...
    def __init__(self, authn_context_class_ref=..., authn_context_decl=..., authn_context_decl_ref=..., authenticating_authority=..., text=..., extension_elements=..., extension_attributes=...) -> None:
        ...
    
    def verify(self): # -> Literal[True]:
        ...
    


def authn_context_type__from_string(xml_string): # -> None:
    ...

class Action(ActionType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:Action element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def action_from_string(xml_string): # -> None:
    ...

class AttributeType_(SamlBase):
    """The urn:oasis:names:tc:SAML:2.0:assertion:AttributeType element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...
    c_any_attribute = ...
    def __init__(self, attribute_value=..., name=..., name_format=..., friendly_name=..., text=..., extension_elements=..., extension_attributes=...) -> None:
        ...
    
    def harvest_element_tree(self, tree): # -> None:
        ...
    


def attribute_type__from_string(xml_string): # -> None:
    ...

class SubjectConfirmationType_(SamlBase):
    """The urn:oasis:names:tc:SAML:2.0:assertion:SubjectConfirmationType
    element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...
    def __init__(self, base_id=..., name_id=..., encrypted_id=..., subject_confirmation_data=..., method=..., text=..., extension_elements=..., extension_attributes=...) -> None:
        ...
    


def subject_confirmation_type__from_string(xml_string): # -> None:
    ...

class AudienceRestriction(AudienceRestrictionType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:AudienceRestriction element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def audience_restriction_from_string(xml_string): # -> None:
    ...

class AuthnContext(AuthnContextType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:AuthnContext element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def authn_context_from_string(xml_string): # -> None:
    ...

class Attribute(AttributeType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:Attribute element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def attribute_from_string(xml_string): # -> None:
    ...

class SubjectConfirmation(SubjectConfirmationType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:SubjectConfirmation element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def subject_confirmation_from_string(xml_string): # -> None:
    ...

class ConditionsType_(SamlBase):
    """The urn:oasis:names:tc:SAML:2.0:assertion:ConditionsType element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...
    def __init__(self, condition=..., audience_restriction=..., one_time_use=..., proxy_restriction=..., not_before=..., not_on_or_after=..., text=..., extension_elements=..., extension_attributes=...) -> None:
        ...
    
    def verify(self): # -> Literal[True]:
        ...
    


def conditions_type__from_string(xml_string): # -> None:
    ...

class AuthnStatementType_(StatementAbstractType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:AuthnStatementType element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...
    def __init__(self, subject_locality=..., authn_context=..., authn_instant=..., session_index=..., session_not_on_or_after=..., text=..., extension_elements=..., extension_attributes=...) -> None:
        ...
    


def authn_statement_type__from_string(xml_string): # -> None:
    ...

class AttributeStatementType_(StatementAbstractType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:AttributeStatementType
    element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...
    def __init__(self, attribute=..., encrypted_attribute=..., text=..., extension_elements=..., extension_attributes=...) -> None:
        ...
    


def attribute_statement_type__from_string(xml_string): # -> None:
    ...

class SubjectType_(SamlBase):
    """The urn:oasis:names:tc:SAML:2.0:assertion:SubjectType element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...
    def __init__(self, base_id=..., name_id=..., encrypted_id=..., subject_confirmation=..., text=..., extension_elements=..., extension_attributes=...) -> None:
        ...
    


def subject_type__from_string(xml_string): # -> None:
    ...

class Conditions(ConditionsType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:Conditions element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def conditions_from_string(xml_string): # -> None:
    ...

class AuthnStatement(AuthnStatementType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:AuthnStatement element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def authn_statement_from_string(xml_string): # -> None:
    ...

class AttributeStatement(AttributeStatementType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:AttributeStatement element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def attribute_statement_from_string(xml_string): # -> None:
    ...

class Subject(SubjectType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:Subject element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def subject_from_string(xml_string): # -> None:
    ...

class EvidenceType_(SamlBase):
    """The urn:oasis:names:tc:SAML:2.0:assertion:EvidenceType element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...
    def __init__(self, assertion_id_ref=..., assertion_uri_ref=..., assertion=..., encrypted_assertion=..., text=..., extension_elements=..., extension_attributes=...) -> None:
        ...
    


def evidence_type__from_string(xml_string): # -> None:
    ...

class Evidence(EvidenceType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:Evidence element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def evidence_from_string(xml_string): # -> None:
    ...

class AuthzDecisionStatementType_(StatementAbstractType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:AuthzDecisionStatementType
    element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...
    def __init__(self, action=..., evidence=..., resource=..., decision=..., text=..., extension_elements=..., extension_attributes=...) -> None:
        ...
    


def authz_decision_statement_type__from_string(xml_string): # -> None:
    ...

class AuthzDecisionStatement(AuthzDecisionStatementType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:AuthzDecisionStatement
    element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def authz_decision_statement_from_string(xml_string): # -> None:
    ...

class AssertionType_(SamlBase):
    """The urn:oasis:names:tc:SAML:2.0:assertion:AssertionType element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...
    def __init__(self, issuer=..., signature=..., subject=..., conditions=..., advice=..., statement=..., authn_statement=..., authz_decision_statement=..., attribute_statement=..., version=..., id=..., issue_instant=..., text=..., extension_elements=..., extension_attributes=...) -> None:
        ...
    
    def verify(self): # -> Literal[True]:
        ...
    


def assertion_type__from_string(xml_string): # -> None:
    ...

class Assertion(AssertionType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:Assertion element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def assertion_from_string(xml_string): # -> None:
    ...

class AdviceType_(SamlBase):
    """The urn:oasis:names:tc:SAML:2.0:assertion:AdviceType element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...
    c_any = ...
    def __init__(self, assertion_id_ref=..., assertion_uri_ref=..., assertion=..., encrypted_assertion=..., text=..., extension_elements=..., extension_attributes=...) -> None:
        ...
    


def advice_type__from_string(xml_string): # -> None:
    ...

class Advice(AdviceType_):
    """The urn:oasis:names:tc:SAML:2.0:assertion:Advice element"""
    c_tag = ...
    c_namespace = ...
    c_children = ...
    c_attributes = ...
    c_child_order = ...
    c_cardinality = ...


def advice_from_string(xml_string): # -> None:
    ...

AG_IDNameQualifiers = ...
ELEMENT_FROM_STRING = ...
ELEMENT_BY_TAG = ...
def factory(tag, **kwargs):
    ...

