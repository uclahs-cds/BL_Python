"""
This type stub file was generated by pyright.
"""

"""
Suppport for the client part of the SAML2.0 SOAP binding.
"""
logger = ...
class XmlParseError(Exception):
    ...


class WrongMessageType(Exception):
    ...


def parse_soap_enveloped_saml_response(text): # -> Any | Literal['']:
    ...

def parse_soap_enveloped_saml_logout_response(text): # -> Any | Literal['']:
    ...

def parse_soap_enveloped_saml_attribute_query(text): # -> Any | Literal['']:
    ...

def parse_soap_enveloped_saml_attribute_response(text): # -> Any | Literal['']:
    ...

def parse_soap_enveloped_saml_logout_request(text): # -> Any | Literal['']:
    ...

def parse_soap_enveloped_saml_authn_request(text): # -> Any | Literal['']:
    ...

def parse_soap_enveloped_saml_artifact_resolve(text): # -> Any | Literal['']:
    ...

def parse_soap_enveloped_saml_artifact_response(text): # -> Any | Literal['']:
    ...

def parse_soap_enveloped_saml_name_id_mapping_request(text): # -> Any | Literal['']:
    ...

def parse_soap_enveloped_saml_name_id_mapping_response(text): # -> Any | Literal['']:
    ...

def parse_soap_enveloped_saml_manage_name_id_request(text): # -> Any | Literal['']:
    ...

def parse_soap_enveloped_saml_manage_name_id_response(text): # -> Any | Literal['']:
    ...

def parse_soap_enveloped_saml_assertion_id_request(text): # -> Any | Literal['']:
    ...

def parse_soap_enveloped_saml_assertion_id_response(text): # -> Any | Literal['']:
    ...

def parse_soap_enveloped_saml_authn_query(text): # -> Any | Literal['']:
    ...

def parse_soap_enveloped_saml_authn_query_response(text): # -> Any | Literal['']:
    ...

def parse_soap_enveloped_saml_authn_response(text): # -> Any | Literal['']:
    ...

def parse_soap_enveloped_saml_thingy(text, expected_tags): # -> Any | Literal['']:
    """Parses a SOAP enveloped SAML thing and returns the thing as
    a string.

    :param text: The SOAP object as XML string
    :param expected_tags: What the tag of the SAML thingy is expected to be.
    :return: SAML thingy as a string
    """
    ...

NS_AND_TAG = ...
def instanciate_class(item, modules): # -> None:
    ...

def class_instances_from_soap_enveloped_saml_thingies(text, modules): # -> dict[str, Any]:
    """Parses a SOAP enveloped header and body SAML thing and returns the
    thing as a dictionary class instance.

    :param text: The SOAP object as XML
    :param modules: modules representing xsd schemas
    :return: The body and headers as class instances
    """
    ...

def open_soap_envelope(text): # -> dict[str, Any]:
    """

    :param text: SOAP message
    :return: dictionary with two keys "body"/"header"
    """
    ...

def make_soap_enveloped_saml_thingy(thingy, headers=...): # -> str:
    """Returns a soap envelope containing a SAML request
    as a text string.

    :param thingy: The SAML thingy
    :return: The SOAP envelope as a string
    """
    ...

def soap_fault(message=..., actor=..., code=..., detail=...): # -> str:
    """Create a SOAP Fault message

    :param message: Human readable error message
    :param actor: Who discovered the error
    :param code: Error code
    :param detail: More specific error message
    :return: A SOAP Fault message as a string
    """
    ...

