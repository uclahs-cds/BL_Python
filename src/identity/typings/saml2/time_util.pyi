"""
This type stub file was generated by pyright.
"""

"""
Implements some usefull functions when dealing with validity of
different types of information.
"""
TIME_FORMAT = ...
TIME_FORMAT_WITH_FRAGMENT = ...
def f_quotient(arg0, arg1, arg2=...): # -> int:
    ...

def modulo(arg0, arg1, arg2=...):
    ...

def maximum_day_in_month_for(year, month): # -> int:
    ...

D_FORMAT = ...
def parse_duration(duration): # -> tuple[Literal['-', '+'], dict[Any, int]]:
    ...

def add_duration(tid, duration): # -> struct_time | None:
    ...

def time_in_a_while(days=..., seconds=..., microseconds=..., milliseconds=..., minutes=..., hours=..., weeks=...): # -> datetime:
    """
    format of timedelta:
        timedelta([days[, seconds[, microseconds[, milliseconds[,
                    minutes[, hours[, weeks]]]]]]])
    :return: UTC time
    """
    ...

def time_a_while_ago(days=..., seconds=..., microseconds=..., milliseconds=..., minutes=..., hours=..., weeks=...): # -> datetime:
    """
    format of timedelta:
        timedelta([days[, seconds[, microseconds[, milliseconds[,
                    minutes[, hours[, weeks]]]]]]])
    """
    ...

def in_a_while(days=..., seconds=..., microseconds=..., milliseconds=..., minutes=..., hours=..., weeks=..., format=...): # -> str:
    """
    format of timedelta:
        timedelta([days[, seconds[, microseconds[, milliseconds[,
                    minutes[, hours[, weeks]]]]]]])
    """
    ...

def a_while_ago(days=..., seconds=..., microseconds=..., milliseconds=..., minutes=..., hours=..., weeks=..., format=...): # -> str:
    ...

def shift_time(dtime, shift):
    """Adds/deletes an integer amount of seconds from a datetime specification

    :param dtime: The datatime specification
    :param shift: The wanted time shift (+/-)
    :return: A shifted datatime specification
    """
    ...

def str_to_time(timestr, format=...): # -> struct_time | Literal[0]:
    """

    :param timestr:
    :param format:
    :return: UTC time
    """
    ...

def instant(format=..., time_stamp=...): # -> str:
    ...

def utc_now(): # -> int:
    ...

def before(point): # -> Literal[True]:
    """True if current time is before point datetime specification.

    NOTE: If point is specified it is supposed to be in local time.
    Not UTC/GMT !! This is because that is what gmtime() expects.
    """
    ...

def after(point): # -> bool:
    """True if current time is after or equal to point datetime specification."""
    ...

not_before = ...
not_on_or_after = ...
valid = ...
def utc_time_sans_frac(): # -> int:
    ...

def later_than(after, before): # -> bool:
    """True if then is later or equal to that"""
    ...

