"""
This type stub file was generated by pyright.
"""

XSI_NAMESPACE = ...
XSI_NIL = ...
class NotValid(Exception):
    ...


class OutsideCardinality(Exception):
    ...


class MustValueError(ValueError):
    ...


class ShouldValueError(ValueError):
    ...


class ResponseLifetimeExceed(Exception):
    ...


class ToEarly(Exception):
    ...


NCNAME = ...
def valid_ncname(name): # -> Literal[True]:
    ...

def valid_id(oid): # -> None:
    ...

def valid_any_uri(item): # -> Literal[True]:
    """very simplistic, ..."""
    ...

def valid_date_time(item): # -> Literal[True]:
    ...

def valid_url(url): # -> Literal[True]:
    ...

def validate_on_or_after(not_on_or_after, slack): # -> int | Literal[False]:
    ...

def validate_before(not_before, slack): # -> Literal[True]:
    ...

def valid_address(address): # -> Literal[True]:
    """Validate IPv4/IPv6 addresses."""
    ...

def valid_ipv4(address): # -> bool:
    """Validate IPv4 addresses."""
    ...

def valid_ipv6(address): # -> bool:
    """Validate IPv6 addresses."""
    ...

def valid_boolean(val): # -> Literal[True]:
    ...

def valid_duration(val): # -> Literal[True]:
    ...

def valid_string(val): # -> Literal[True]:
    """Expects unicode
    Char ::= #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] |
                    [#x10000-#x10FFFF]
    """
    ...

def valid_unsigned_short(val): # -> Literal[True]:
    ...

def valid_positive_integer(val): # -> Literal[True]:
    ...

def valid_non_negative_integer(val): # -> Literal[True]:
    ...

def valid_integer(val): # -> Literal[True]:
    ...

def valid_base64(val): # -> Literal[True]:
    ...

def valid_qname(val): # -> Literal[True]:
    """A qname is either
    NCName or
    NCName ':' NCName
    """
    ...

def valid_anytype(val): # -> Literal[True]:
    """Goes through all known type validators

    :param val: The value to validate
    :return: True is value is valid otherwise an exception is raised
    """
    ...

VALIDATOR = ...
def validate_value_type(value, spec): # -> bool:
    """
    c_value_type = {'base': 'string', 'enumeration': ['Permit', 'Deny',
                                                      'Indeterminate']}
        {'member': 'anyURI', 'base': 'list'}
        {'base': 'anyURI'}
        {'base': 'NCName'}
        {'base': 'string'}
    """
    ...

def valid(typ, value):
    ...

ERROR_TEXT = ...
def valid_instance(instance): # -> Literal[True]:
    ...

def valid_domain_name(dns_name): # -> None:
    ...

