"""
This type stub file was generated by pyright.
"""

import abc

"""
This module defines an AbstractAPI, which defines a standardized interface for a Connexion API.
"""
MODULE_PATH = ...
SWAGGER_UI_URL = ...
logger = ...
class AbstractAPIMeta(abc.ABCMeta):
    def __init__(cls, name, bases, attrs) -> None:
        ...
    


class AbstractAPI(metaclass=AbstractAPIMeta):
    """
    Defines an abstract interface for a Swagger API
    """
    def __init__(self, specification, base_path=..., arguments=..., validate_responses=..., strict_validation=..., resolver=..., auth_all_paths=..., debug=..., resolver_error_handler=..., validator_map=..., pythonic_params=..., pass_context_arg_name=..., options=...) -> None:
        """
        :type specification: pathlib.Path | dict
        :type base_path: str | None
        :type arguments: dict | None
        :type validate_responses: bool
        :type strict_validation: bool
        :type auth_all_paths: bool
        :type debug: bool
        :param validator_map: Custom validators for the types "parameter", "body" and "response".
        :type validator_map: dict
        :param resolver: Callable that maps operationID to a function
        :param resolver_error_handler: If given, a callable that generates an
            Operation used for handling ResolveErrors
        :type resolver_error_handler: callable | None
        :param pythonic_params: When True CamelCase parameters are converted to snake_case and an underscore is appended
            to any shadowed built-ins
        :type pythonic_params: bool
        :param options: New style options dictionary.
        :type options: dict | None
        :param pass_context_arg_name: If not None URL request handling functions with an argument matching this name
            will be passed the framework's request context.
        :type pass_context_arg_name: str | None
        """
        ...
    
    @abc.abstractmethod
    def add_openapi_json(self): # -> None:
        """
        Adds openapi spec to {base_path}/openapi.json
             (or {base_path}/swagger.json for swagger2)
        """
        ...
    
    @abc.abstractmethod
    def add_swagger_ui(self): # -> None:
        """
        Adds swagger ui to {base_path}/ui/
        """
        ...
    
    @abc.abstractmethod
    def add_auth_on_not_found(self, security, security_definitions): # -> None:
        """
        Adds a 404 error handler to authenticate and only expose the 404 status if the security validation pass.
        """
        ...
    
    @staticmethod
    @abc.abstractmethod
    def make_security_handler_factory(pass_context_arg_name): # -> None:
        """ Create SecurityHandlerFactory to create all security check handlers """
        ...
    
    def add_operation(self, path, method): # -> None:
        """
        Adds one operation to the api.

        This method uses the OperationID identify the module and function that will handle the operation

        From Swagger Specification:

        **OperationID**

        A friendly name for the operation. The id MUST be unique among all operations described in the API.
        Tools and libraries MAY use the operation id to uniquely identify an operation.

        :type method: str
        :type path: str
        """
        ...
    
    def add_paths(self, paths=...): # -> None:
        """
        Adds the paths defined in the specification as endpoints

        :type paths: list
        """
        ...
    
    @classmethod
    @abc.abstractmethod
    def get_request(self, *args, **kwargs): # -> None:
        """
        This method converts the user framework request to a ConnexionRequest.
        """
        ...
    
    @classmethod
    @abc.abstractmethod
    def get_response(self, response, mimetype=..., request=...): # -> None:
        """
        This method converts a handler response to a framework response.
        This method should just retrieve response from handler then call `cls._get_response`.
        It is mainly here to handle AioHttp async handler.
        :param response: A response to cast (tuple, framework response, etc).
        :param mimetype: The response mimetype.
        :type mimetype: Union[None, str]
        :param request: The request associated with this response (the user framework request).
        """
        ...
    
    @classmethod
    def get_connexion_response(cls, response, mimetype=...): # -> ConnexionResponse | None:
        """ Cast framework dependent response to ConnexionResponse used for schema validation """
        ...
    
    def json_loads(self, data): # -> Any | str | None:
        ...
    


