"""
This type stub file was generated by pyright.
"""

from aiohttp import web
from aiohttp.web_exceptions import HTTPNotFound
from connexion.apis.abstract import AbstractAPI

"""
This module defines an AioHttp Connexion API which implements translations between AioHttp and
Connexion requests / responses.
"""
logger = ...
@web.middleware
async def problems_middleware(request, handler): # -> Any | None:
    ...

class AioHttpApi(AbstractAPI):
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def make_security_handler_factory(pass_context_arg_name): # -> AioHttpSecurityHandlerFactory:
        """ Create default SecurityHandlerFactory to create all security check handlers """
        ...
    
    @staticmethod
    def normalize_string(string): # -> str:
        ...
    
    def add_openapi_json(self): # -> None:
        """
        Adds openapi json to {base_path}/openapi.json
             (or {base_path}/swagger.json for swagger2)
        """
        ...
    
    def add_openapi_yaml(self): # -> None:
        """
        Adds openapi json to {base_path}/openapi.json
             (or {base_path}/swagger.json for swagger2)
        """
        ...
    
    def add_swagger_ui(self): # -> None:
        """
        Adds swagger ui to {base_path}/ui/
        """
        ...
    
    def add_auth_on_not_found(self, security, security_definitions): # -> None:
        """
        Adds a 404 error handler to authenticate and only expose the 404 status if the security validation pass.
        """
        ...
    
    @classmethod
    async def get_request(cls, req): # -> ConnexionRequest:
        """Convert aiohttp request to connexion

        :param req: instance of aiohttp.web.Request
        :return: connexion request instance
        :rtype: ConnexionRequest
        """
        ...
    
    @classmethod
    async def get_response(cls, response, mimetype=..., request=...): # -> Any | None:
        """Get response.
        This method is used in the lifecycle decorators

        :type response: aiohttp.web.StreamResponse | (Any,) | (Any, int) | (Any, dict) | (Any, int, dict)
        :rtype: aiohttp.web.Response
        """
        ...
    


class _HttpNotFoundError(HTTPNotFound):
    def __init__(self) -> None:
        ...
    


