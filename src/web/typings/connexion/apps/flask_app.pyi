"""
This type stub file was generated by pyright.
"""

from types import FunctionType
from flask import json
from .abstract import AbstractApp

"""
This module defines a FlaskApp, a Connexion application to wrap a Flask application.
"""
logger = ...
class FlaskApp(AbstractApp):
    def __init__(self, import_name, server=..., extra_files=..., **kwargs) -> None:
        """
        :param extra_files: additional files to be watched by the reloader, defaults to the swagger specs of added apis
        :type extra_files: list[str | pathlib.Path], optional

        See :class:`~connexion.AbstractApp` for additional parameters.
        """
        ...
    
    def create_app(self): # -> Flask:
        ...
    
    def get_root_path(self): # -> Path:
        ...
    
    def set_errors_handlers(self): # -> None:
        ...
    
    def common_error_handler(self, exception): # -> Any | None:
        """
        :type exception: Exception
        """
        ...
    
    def add_api(self, specification, **kwargs):
        ...
    
    def add_error_handler(self, error_code: int, function: FunctionType) -> None:
        ...
    
    def run(self, port=..., server=..., debug=..., host=..., extra_files=..., **options): # -> None:
        """
        Runs the application on a local development server.

        :param host: the host interface to bind on.
        :type host: str
        :param port: port to listen to
        :type port: int
        :param server: which wsgi server to use
        :type server: str | None
        :param debug: include debugging information
        :type debug: bool
        :param extra_files: additional files to be watched by the reloader.
        :type extra_files: Iterable[str | pathlib.Path]
        :param options: options to be forwarded to the underlying server
        """
        ...
    


class FlaskJSONEncoder(json.JSONEncoder):
    def default(self, o): # -> str | float:
        ...
    


class NumberConverter(werkzeug.routing.BaseConverter):
    """ Flask converter for OpenAPI number type """
    regex = ...
    def to_python(self, value): # -> float:
        ...
    


class IntegerConverter(werkzeug.routing.BaseConverter):
    """ Flask converter for OpenAPI integer type """
    regex = ...
    def to_python(self, value): # -> int:
        ...
    


