"""
This type stub file was generated by pyright.
"""

from .decorator import BaseDecorator

"""
This module defines a view function decorator to validate its responses.
"""
logger = ...
class ResponseValidator(BaseDecorator):
    def __init__(self, operation, mimetype, validator=...) -> None:
        """
        :type operation: Operation
        :type mimetype: str
        :param validator: Validator class that should be used to validate passed data
                          against API schema.
        :type validator: jsonschema.IValidator
        """
        ...
    
    def validate_response(self, data, status_code, headers, url): # -> Literal[True]:
        """
        Validates the Response object based on what has been declared in the specification.
        Ensures the response body matches the declared schema.
        :type data: dict
        :type status_code: int
        :type headers: dict
        :rtype bool | None
        """
        ...
    
    def is_json_schema_compatible(self, response_schema: dict) -> bool:
        """
        Verify if the specified operation responses are JSON schema
        compatible.

        All operations that specify a JSON schema and have content
        type "application/json" or "text/plain" can be validated using
        json_schema package.
        """
        ...
    
    def __call__(self, function): # -> _Wrapped[..., Unknown, (request: Unknown), Coroutine[Any, Any, Unknown | Any]] | _Wrapped[..., Unknown, (request: Unknown), Unknown]:
        """
        :type function: types.FunctionType
        :rtype: types.FunctionType
        """
        ...
    
    def __repr__(self): # -> Literal['<ResponseValidator>']:
        """
        :rtype: str
        """
        ...
    


