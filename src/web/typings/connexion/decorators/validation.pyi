"""
This type stub file was generated by pyright.
"""

from typing import AnyStr, Union
from ..lifecycle import ConnexionResponse

"""
This module defines view function decorators to validate request and response parameters and bodies.
"""
_jsonschema_3_or_newer = ...
logger = ...
TYPE_MAP = ...
class TypeValidationError(Exception):
    def __init__(self, schema_type, parameter_type, parameter_name) -> None:
        """
        Exception raise when type validation fails

        :type schema_type: str
        :type parameter_type: str
        :type parameter_name: str
        :return:
        """
        ...
    
    def __str__(self) -> str:
        ...
    


def coerce_type(param, value, parameter_type, parameter_name=...): # -> list[Unknown] | dict[Unknown, Unknown] | None:
    ...

def validate_parameter_list(request_params, spec_params): # -> set[Unknown]:
    ...

class RequestBodyValidator:
    def __init__(self, schema, consumes, api, is_null_value_valid=..., validator=..., strict_validation=...) -> None:
        """
        :param schema: The schema of the request body
        :param consumes: The list of content types the operation consumes
        :param is_null_value_valid: Flag to indicate if null is accepted as valid value.
        :param validator: Validator class that should be used to validate passed data
                          against API schema. Default is jsonschema.Draft4Validator.
        :type validator: jsonschema.IValidator
        :param strict_validation: Flag indicating if parameters not in spec are allowed
        """
        ...
    
    def validate_formdata_parameter_list(self, request): # -> set[Unknown]:
        ...
    
    def __call__(self, function): # -> _Wrapped[..., Unknown, (request: Unknown), Unknown]:
        """
        :type function: types.FunctionType
        :rtype: types.FunctionType
        """
        ...
    
    def validate_schema(self, data: dict, url: AnyStr) -> Union[ConnexionResponse, None]:
        ...
    


class ResponseBodyValidator:
    def __init__(self, schema, validator=...) -> None:
        """
        :param schema: The schema of the response body
        :param validator: Validator class that should be used to validate passed data
                          against API schema. Default is Draft4ResponseValidator.
        :type validator: jsonschema.IValidator
        """
        ...
    
    def validate_schema(self, data: dict, url: AnyStr) -> Union[ConnexionResponse, None]:
        ...
    


class ParameterValidator:
    def __init__(self, parameters, api, strict_validation=...) -> None:
        """
        :param parameters: List of request parameter dictionaries
        :param api: api that the validator is attached to
        :param strict_validation: Flag indicating if parameters not in spec are allowed
        """
        ...
    
    @staticmethod
    def validate_parameter(parameter_type, value, param, param_name=...): # -> str | None:
        ...
    
    def validate_query_parameter_list(self, request): # -> set[Unknown]:
        ...
    
    def validate_formdata_parameter_list(self, request): # -> set[Unknown]:
        ...
    
    def validate_query_parameter(self, param, request): # -> str | None:
        """
        Validate a single query parameter (request.args in Flask)

        :type param: dict
        :rtype: str
        """
        ...
    
    def validate_path_parameter(self, param, request): # -> str | None:
        ...
    
    def validate_header_parameter(self, param, request): # -> str | None:
        ...
    
    def validate_cookie_parameter(self, param, request): # -> str | None:
        ...
    
    def validate_formdata_parameter(self, param_name, param, request): # -> str | None:
        ...
    
    def __call__(self, function): # -> _Wrapped[..., Unknown, (request: Unknown), Unknown]:
        """
        :type function: types.FunctionType
        :rtype: types.FunctionType
        """
        ...
    


