"""
This type stub file was generated by pyright.
"""

import abc
from connexion.operations.secure import SecureOperation

"""
This module defines an AbstractOperation class which implements an abstract Operation interface
and functionality shared between Swagger 2 and OpenAPI 3 specifications.
"""
logger = ...
DEFAULT_MIMETYPE = ...
VALIDATOR_MAP = ...
class AbstractOperation(SecureOperation, metaclass=abc.ABCMeta):
    """
    An API routes requests to an Operation by a (path, method) pair.
    The operation uses a resolver to resolve its handler function.
    We use the provided spec to do a bunch of heavy lifting before
    (and after) we call security_schemes handler.
    The registered handler function ends up looking something like::

        @secure_endpoint
        @validate_inputs
        @deserialize_function_inputs
        @serialize_function_outputs
        @validate_outputs
        def user_provided_handler_function(important, stuff):
            if important:
                serious_business(stuff)
    """
    def __init__(self, api, method, path, operation, resolver, app_security=..., security_schemes=..., validate_responses=..., strict_validation=..., randomize_endpoint=..., validator_map=..., pythonic_params=..., uri_parser_class=..., pass_context_arg_name=...) -> None:
        """
        :param api: api that this operation is attached to
        :type api: apis.AbstractAPI
        :param method: HTTP method
        :type method: str
        :param path:
        :type path: str
        :param operation: swagger operation object
        :type operation: dict
        :param resolver: Callable that maps operationID to a function
        :param app_produces: list of content types the application can return by default
        :param app_security: list of security rules the application uses by default
        :type app_security: list
        :param security_schemes: `Security Definitions Object
            <https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#security-definitions-object>`_
        :type security_schemes: dict
        :param validate_responses: True enables validation. Validation errors generate HTTP 500 responses.
        :type validate_responses: bool
        :param strict_validation: True enables validation on invalid request parameters
        :type strict_validation: bool
        :param randomize_endpoint: number of random characters to append to operation name
        :type randomize_endpoint: integer
        :param validator_map: Custom validators for the types "parameter", "body" and "response".
        :type validator_map: dict
        :param pythonic_params: When True CamelCase parameters are converted to snake_case and an underscore is appended
            to any shadowed built-ins
        :type pythonic_params: bool
        :param uri_parser_class: class to use for uri parsing
        :type uri_parser_class: AbstractURIParser
        :param pass_context_arg_name: If not None will try to inject the request context to the function using this
            name.
        :type pass_context_arg_name: str|None
        """
        ...
    
    @property
    def method(self): # -> Unknown:
        """
        The HTTP method for this operation (ex. GET, POST)
        """
        ...
    
    @property
    def path(self): # -> Unknown:
        """
        The path of the operation, relative to the API base path
        """
        ...
    
    @property
    def responses(self):
        """
        Returns the responses for this operation
        """
        ...
    
    @property
    def validator_map(self): # -> dict[str, Unknown]:
        """
        Validators to use for parameter, body, and response validation
        """
        ...
    
    @property
    def operation_id(self):
        """
        The operation id used to identify the operation internally to the app
        """
        ...
    
    @property
    def randomize_endpoint(self): # -> None:
        """
        number of random digits to generate and append to the operation_id.
        """
        ...
    
    @property
    def router_controller(self):
        """
        The router controller to use (python module where handler functions live)
        """
        ...
    
    @property
    def strict_validation(self): # -> bool:
        """
        If True, validate all requests against the spec
        """
        ...
    
    @property
    def pythonic_params(self): # -> bool:
        """
        If True, convert CamelCase into pythonic_variable_names
        """
        ...
    
    @property
    def validate_responses(self): # -> bool:
        """
        If True, check the response against the response schema, and return an
        error if the response does not validate.
        """
        ...
    
    @property
    @abc.abstractmethod
    def parameters(self): # -> None:
        """
        Returns the parameters for this operation
        """
        ...
    
    @property
    @abc.abstractmethod
    def produces(self): # -> None:
        """
        Content-Types that the operation produces
        """
        ...
    
    @property
    @abc.abstractmethod
    def consumes(self): # -> None:
        """
        Content-Types that the operation consumes
        """
        ...
    
    @property
    @abc.abstractmethod
    def body_schema(self): # -> None:
        """
        The body schema definition for this operation.
        """
        ...
    
    @property
    @abc.abstractmethod
    def body_definition(self): # -> None:
        """
        The body definition for this operation.
        :rtype: dict
        """
        ...
    
    def get_arguments(self, path_params, query_params, body, files, arguments, has_kwargs, sanitize): # -> dict[Unknown, Unknown]:
        """
        get arguments for handler function
        """
        ...
    
    def response_definition(self, status_code=..., content_type=...):
        """
        response definition for this endpoint
        """
        ...
    
    @abc.abstractmethod
    def response_schema(self, status_code=..., content_type=...): # -> None:
        """
        response schema for this endpoint
        """
        ...
    
    @abc.abstractmethod
    def example_response(self, status_code=..., content_type=...): # -> None:
        """
        Returns an example from the spec
        """
        ...
    
    @abc.abstractmethod
    def get_path_parameter_types(self): # -> None:
        """
        Returns the types for parameters in the path
        """
        ...
    
    @abc.abstractmethod
    def with_definitions(self, schema): # -> None:
        """
        Returns the given schema, but with the definitions from the spec
        attached. This allows any remaining references to be resolved by a
        validator (for example).
        """
        ...
    
    def get_mimetype(self): # -> Literal['application/json']:
        """
        If the endpoint has no 'produces' then the default is
        'application/json'.

        :rtype str
        """
        ...
    
    @property
    def function(self): # -> _Wrapped[..., Unknown, (*args: Unknown, **kwargs: Unknown), Coroutine[Any, Any, Unknown | Any] | Unknown] | _Wrapped[..., Unknown, (*args: Unknown, **kwargs: Unknown), Coroutine[Any, Any, Unknown | Any]] | _Wrapped[..., Unknown, (*args: Unknown, **kwargs: Unknown), Unknown]:
        """
        Operation function with decorators

        :rtype: types.FunctionType
        """
        ...
    
    def json_loads(self, data):
        """
        A wrapper for calling the API specific JSON loader.

        :param data: The JSON data in textual form.
        :type data: bytes
        """
        ...
    


