"""
This type stub file was generated by pyright.
"""

from connexion.operations.abstract import AbstractOperation

"""
This module defines an OpenAPIOperation class, a Connexion operation specific for OpenAPI 3 specs.
"""
logger = ...
class OpenAPIOperation(AbstractOperation):
    """
    A single API operation on a path.
    """
    def __init__(self, api, method, path, operation, resolver, path_parameters=..., app_security=..., components=..., validate_responses=..., strict_validation=..., randomize_endpoint=..., validator_map=..., pythonic_params=..., uri_parser_class=..., pass_context_arg_name=...) -> None:
        """
        This class uses the OperationID identify the module and function that will handle the operation

        From Swagger Specification:

        **OperationID**

        A friendly name for the operation. The id MUST be unique among all operations described in the API.
        Tools and libraries MAY use the operation id to uniquely identify an operation.

        :param method: HTTP method
        :type method: str
        :param path:
        :type path: str
        :param operation: swagger operation object
        :type operation: dict
        :param resolver: Callable that maps operationID to a function
        :param path_parameters: Parameters defined in the path level
        :type path_parameters: list
        :param app_security: list of security rules the application uses by default
        :type app_security: list
        :param components: `Components Object
            <https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#componentsObject>`_
        :type components: dict
        :param validate_responses: True enables validation. Validation errors generate HTTP 500 responses.
        :type validate_responses: bool
        :param strict_validation: True enables validation on invalid request parameters
        :type strict_validation: bool
        :param randomize_endpoint: number of random characters to append to operation name
        :type randomize_endpoint: integer
        :param validator_map: Custom validators for the types "parameter", "body" and "response".
        :type validator_map: dict
        :param pythonic_params: When True CamelCase parameters are converted to snake_case and an underscore is appended
            to any shadowed built-ins
        :type pythonic_params: bool
        :param uri_parser_class: class to use for uri parsing
        :type uri_parser_class: AbstractURIParser
        :param pass_context_arg_name: If not None will try to inject the request context to the function using this
            name.
        :type pass_context_arg_name: str|None
        """
        ...
    
    @classmethod
    def from_spec(cls, spec, api, path, method, resolver, *args, **kwargs): # -> Self@OpenAPIOperation:
        ...
    
    @property
    def request_body(self):
        ...
    
    @property
    def parameters(self):
        ...
    
    @property
    def consumes(self): # -> list[Unknown]:
        ...
    
    @property
    def produces(self): # -> list[Unknown]:
        ...
    
    def with_definitions(self, schema):
        ...
    
    def response_schema(self, status_code=..., content_type=...): # -> dict[Unknown, Unknown]:
        ...
    
    def example_response(self, status_code=..., content_type=...): # -> tuple[Unknown, int] | tuple[Unknown | dict[Unknown, Unknown] | list[Unknown], int] | tuple[None, int]:
        """
        Returns example response from spec
        """
        ...
    
    def get_path_parameter_types(self): # -> dict[Unknown, Unknown]:
        ...
    
    @property
    def body_schema(self):
        """
        The body schema definition for this operation.
        """
        ...
    
    @property
    def body_definition(self): # -> dict[Unknown, Unknown]:
        """
        The body complete definition for this operation.

        **There can be one "body" parameter at most.**

        :rtype: dict
        """
        ...
    


