"""
This type stub file was generated by pyright.
"""

import abc
import typing as t

"""
This module defines an abstract SecurityHandlerFactory which supports the creation of security
handlers for operations.
"""
logger = ...
class AbstractSecurityHandlerFactory(abc.ABC):
    """
    get_*_func -> _get_function -> get_function_from_name (name=security function defined in spec)
        (if url defined instead of a function -> get_token_info_remote)

    std security functions: security_{passthrough,deny}

    verify_* -> returns a security wrapper around the security function
        check_* -> returns a function tasked with doing auth for use inside the verify wrapper
            check helpers (used outside wrappers): _need_to_add_context_or_scopes
            the security function

        verify helpers (used inside wrappers): get_auth_header_value, get_cookie_value
    """
    no_value = ...
    required_scopes_kw = ...
    def __init__(self, pass_context_arg_name) -> None:
        ...
    
    def get_tokeninfo_func(self, security_definition: dict) -> t.Optional[t.Callable]:
        """
        :type security_definition: dict

        >>> get_tokeninfo_url({'x-tokenInfoFunc': 'foo.bar'})
        '<function foo.bar>'
        """
        ...
    
    @classmethod
    def get_scope_validate_func(cls, security_definition): # -> Any | None:
        """
        :type security_definition: dict
        :rtype: function

        >>> get_scope_validate_func({'x-scopeValidateFunc': 'foo.bar'})
        '<function foo.bar>'
        """
        ...
    
    @classmethod
    def get_basicinfo_func(cls, security_definition): # -> Any | None:
        """
        :type security_definition: dict
        :rtype: function

        >>> get_basicinfo_func({'x-basicInfoFunc': 'foo.bar'})
        '<function foo.bar>'
        """
        ...
    
    @classmethod
    def get_apikeyinfo_func(cls, security_definition): # -> Any | None:
        """
        :type security_definition: dict
        :rtype: function

        >>> get_apikeyinfo_func({'x-apikeyInfoFunc': 'foo.bar'})
        '<function foo.bar>'
        """
        ...
    
    @classmethod
    def get_bearerinfo_func(cls, security_definition): # -> Any | None:
        """
        :type security_definition: dict
        :rtype: function

        >>> get_bearerinfo_func({'x-bearerInfoFunc': 'foo.bar'})
        '<function foo.bar>'
        """
        ...
    
    @staticmethod
    def security_passthrough(function):
        """
        :type function: types.FunctionType
        :rtype: types.FunctionType
        """
        ...
    
    @staticmethod
    def security_deny(function): # -> (*args: Unknown, **kwargs: Unknown) -> NoReturn:
        """
        :type function: types.FunctionType
        :rtype: types.FunctionType
        """
        ...
    
    @staticmethod
    def validate_scope(required_scopes, token_scopes): # -> bool:
        """
        :param required_scopes: Scopes required to access operation
        :param token_scopes: Scopes granted by authorization server
        :rtype: bool
        """
        ...
    
    @staticmethod
    def get_auth_header_value(request): # -> tuple[None, None] | tuple[Unknown, Unknown]:
        """
        Called inside security wrapper functions

        Return Authorization type and value if any.
        If not Authorization, return (None, None)
        Raise OAuthProblem for invalid Authorization header
        """
        ...
    
    def verify_oauth(self, token_info_func, scope_validate_func, required_scopes): # -> (request: Unknown) -> (object | Unknown):
        ...
    
    def verify_basic(self, basic_info_func): # -> (request: Unknown) -> (object | Unknown):
        ...
    
    @staticmethod
    def get_cookie_value(cookies, name): # -> str | None:
        '''
        Called inside security wrapper functions

        Returns cookie value by its name. None if no such value.
        :param cookies: str: cookies raw data
        :param name: str: cookies key
        '''
        ...
    
    def verify_api_key(self, api_key_info_func, loc, name): # -> (request: Unknown) -> (object | Unknown):
        ...
    
    def verify_bearer(self, token_info_func): # -> (request: Unknown) -> (object | Unknown):
        """
        :param token_info_func: types.FunctionType
        :rtype: types.FunctionType
        """
        ...
    
    def verify_multiple_schemes(self, schemes): # -> (request: Unknown) -> (object | dict[Unknown, Unknown]):
        """
        Verifies multiple authentication schemes in AND fashion.
        If any scheme fails, the entire authentication fails.

        :param schemes: mapping scheme_name to auth function
        :type schemes: dict
        :rtype: types.FunctionType
        """
        ...
    
    @staticmethod
    def verify_none(): # -> (request: Unknown) -> dict[Unknown, Unknown]:
        """
        :rtype: types.FunctionType
        """
        ...
    
    def check_bearer_token(self, token_info_func): # -> (request: Unknown, *args: Unknown, required_scopes: Unknown | None = None) -> (object | Unknown):
        ...
    
    def check_basic_auth(self, basic_info_func): # -> (request: Unknown, *args: Unknown, required_scopes: Unknown | None = None) -> (object | Unknown):
        ...
    
    def check_api_key(self, api_key_info_func): # -> (request: Unknown, *args: Unknown, required_scopes: Unknown | None = None) -> (object | Unknown):
        ...
    
    def check_oauth_func(self, token_info_func, scope_validate_func): # -> (request: Unknown, token: Unknown, required_scopes: Unknown) -> (object | Unknown):
        ...
    
    @classmethod
    def verify_security(cls, auth_funcs, function): # -> _Wrapped[..., Unknown, (request: Unknown), Unknown]:
        ...
    
    @abc.abstractmethod
    def get_token_info_remote(self, token_info_url): # -> None:
        """
        Return a function which will call `token_info_url` to retrieve token info.

        Returned function must accept oauth token in parameter.
        It must return a token_info dict in case of success, None otherwise.

        :param token_info_url: Url to get information about the token
        :type token_info_url: str
        :rtype: types.FunctionType
        """
        ...
    


