"""
This type stub file was generated by pyright.
"""

from collections.abc import Mapping
from jsonschema import Draft4Validator
from .operations import OpenAPIOperation, Swagger2Operation

"""
This module defines Python interfaces for OpenAPI specifications.
"""
validate_properties = Draft4Validator.VALIDATORS["properties"]
def create_spec_validator(spec: dict) -> Draft4Validator:
    """Create a Validator to validate an OpenAPI spec against the OpenAPI schema.

    :param spec: specification to validate
    """
    ...

NO_SPEC_VERSION_ERR_MSG = ...
def canonical_base_path(base_path):
    """
    Make given "basePath" a canonical base URL which can be prepended to paths starting with "/".
    """
    ...

class Specification(Mapping):
    def __init__(self, raw_spec) -> None:
        ...
    
    def get_path_params(self, path): # -> Incomplete | list[Any]:
        ...
    
    def get_operation(self, path, method): # -> Mapping[Unknown, Unknown] | Incomplete | list[Unknown] | tuple[Unknown, ...]:
        ...
    
    @property
    def raw(self): # -> Unknown:
        ...
    
    @property
    def version(self): # -> tuple[int, ...]:
        ...
    
    @property
    def security(self): # -> Incomplete | None:
        ...
    
    def __getitem__(self, k): # -> Incomplete:
        ...
    
    def __iter__(self): # -> Iterator[Unknown] | Incomplete:
        ...
    
    def __len__(self): # -> int | Incomplete:
        ...
    
    @classmethod
    def from_file(cls, spec, arguments=...): # -> Swagger2Specification | OpenAPISpecification:
        """
        Takes in a path to a YAML file, and returns a Specification
        """
        ...
    
    @classmethod
    def from_dict(cls, spec): # -> Swagger2Specification | OpenAPISpecification:
        """
        Takes in a dictionary, and returns a Specification
        """
        ...
    
    def clone(self): # -> Self@Specification:
        ...
    
    @classmethod
    def load(cls, spec, arguments=...): # -> Swagger2Specification | OpenAPISpecification:
        ...
    
    def with_base_path(self, base_path): # -> Self@Specification:
        ...
    


class Swagger2Specification(Specification):
    """Python interface for a Swagger 2 specification."""
    yaml_name = ...
    operation_cls = Swagger2Operation
    openapi_schema = ...
    @property
    def produces(self): # -> Incomplete:
        ...
    
    @property
    def consumes(self): # -> Incomplete:
        ...
    
    @property
    def definitions(self): # -> Incomplete:
        ...
    
    @property
    def parameter_definitions(self): # -> Incomplete:
        ...
    
    @property
    def response_definitions(self): # -> Incomplete:
        ...
    
    @property
    def security_definitions(self): # -> Incomplete | dict[Any, Any]:
        ...
    
    @property
    def base_path(self): # -> str | Incomplete:
        ...
    
    @base_path.setter
    def base_path(self, base_path): # -> None:
        ...
    


class OpenAPISpecification(Specification):
    """Python interface for an OpenAPI 3 specification."""
    yaml_name = ...
    operation_cls = OpenAPIOperation
    openapi_schema = ...
    @property
    def security_definitions(self): # -> Incomplete:
        ...
    
    @property
    def components(self): # -> Incomplete:
        ...
    
    @property
    def base_path(self): # -> LiteralString:
        ...
    
    @base_path.setter
    def base_path(self, base_path): # -> None:
        ...
    


