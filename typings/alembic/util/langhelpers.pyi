"""
This type stub file was generated by pyright.
"""

from typing import (Any, Callable, Dict, Mapping, Optional, Tuple, TypeVar,
                    overload)

EMPTY_DICT: Mapping[Any, Any] = ...
_T = TypeVar("_T")
class _ModuleClsMeta(type):
    def __setattr__(cls, key: str, value: Callable) -> None:
        ...
    


class ModuleClsProxy(metaclass=_ModuleClsMeta):
    """Create module level proxy functions for the
    methods on a given class.

    The functions will have a compatible signature
    as the methods.

    """
    _setups: Dict[type, Tuple[set, list]] = ...
    @classmethod
    def create_module_class_proxy(cls, globals_, locals_): # -> None:
        ...
    


def rev_id() -> str:
    ...

@overload
def to_tuple(x: Any, default: tuple) -> tuple:
    ...

@overload
def to_tuple(x: None, default: Optional[_T] = ...) -> _T:
    ...

@overload
def to_tuple(x: Any, default: Optional[tuple] = ...) -> tuple:
    ...

def to_tuple(x, default=...): # -> tuple[str] | tuple[Unknown, ...] | tuple[Unknown] | None:
    ...

def dedupe_tuple(tup: Tuple[str, ...]) -> Tuple[str, ...]:
    ...

class Dispatcher:
    def __init__(self, uselist: bool = ...) -> None:
        ...
    
    def dispatch_for(self, target: Any, qualifier: str = ...) -> Callable:
        ...
    
    def dispatch(self, obj: Any, qualifier: str = ...) -> Any:
        ...
    
    def branch(self) -> Dispatcher:
        """Return a copy of this dispatcher that is independently
        writable."""
        ...
    


def not_none(value: Optional[_T]) -> _T:
    ...

